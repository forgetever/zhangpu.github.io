<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>听城</title>
  <subtitle>Life is too short to be ordinary</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhangpu1211.github.io/"/>
  <updated>2017-09-05T03:10:59.580Z</updated>
  <id>https://zhangpu1211.github.io/</id>
  
  <author>
    <name>听城</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Matplotlib 绘3D图</title>
    <link href="https://zhangpu1211.github.io/2017/09/05/Matplotlib-%E7%BB%983D%E5%9B%BE/"/>
    <id>https://zhangpu1211.github.io/2017/09/05/Matplotlib-绘3D图/</id>
    <published>2017-09-05T03:09:27.000Z</published>
    <updated>2017-09-05T03:10:59.580Z</updated>
    
    <content type="html"><![CDATA[<p>Matplotlib 也可以绘制 3D 图像，与二维图像不同的是，绘制三维图像主要通过 mplot3d 模块实现。但是，使用 Matplotlib 绘制三维图像实际上是在二维画布上展示，所以一般绘制三维图像时，同样需要载入 pyplot 模块。<br>mplot3d 模块下主要包含 4 个大类，分别是：</p>
<ul>
<li>mpl_toolkits.mplot3d.axes3d()</li>
<li>mpl_toolkits.mplot3d.axis3d()</li>
<li>mpl_toolkits.mplot3d.art3d()</li>
<li>mpl_toolkits.mplot3d.proj3d()</li>
</ul>
<p>其中，axes3d() 下面主要包含了各种实现绘图的类和方法。axis3d() 主要是包含了和坐标轴相关的类和方法。art3d() 包含了一些可将 2D 图像转换并用于 3D 绘制的类和方法。proj3d() 中包含一些零碎的类和方法，例如计算三维向量长度等。<br>一般情况下，我们用到最多的就是 mpl_toolkits.mplot3d.axes3d() 中的mpl_toolkits.mplot3d.axes3d.Axes3D() 类，而 Axes3D() 下面又存在绘制不同类型 3D 图的方法。你可以通过下面的方式导入 Axes3D()。<br><code>from mpl_toolkits.mplot3d.axes3d import Axes3D</code>或<code>from mpl_toolkits.mplot3d import Axes3D</code></p>
<h4 id="三维散点图"><a href="#三维散点图" class="headerlink" title="三维散点图"></a>三维散点图</h4><p>首先，我们导入 numpy 随机生成一组数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import numpy as np</div><div class="line"></div><div class="line"># x, y, z 均为 0 到 1 之间的 100 个随机数</div><div class="line">x = np.random.normal(0, 1, 100)</div><div class="line">y = np.random.normal(0, 1, 100)</div><div class="line">z = np.random.normal(0, 1, 100)</div></pre></td></tr></table></figure></p>
<p>接下来，开始绘图。第一步是载入 2D, 3D 绘图模块。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">from mpl_toolkits.mplot3d import Axes3D</div><div class="line">import matplotlib.pyplot as plt</div></pre></td></tr></table></figure></p>
<p>第二步，使用 Axes3D() 创建 3D 图形对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fig = plt.figure()</div><div class="line">ax = Axes3D(fig)</div></pre></td></tr></table></figure></p>
<p>最后，调用散点图绘制方法绘图并显示出来。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ax.scatter(x, y, z)</div><div class="line">plt.show()</div></pre></td></tr></table></figure></p>
<h4 id="三维线型图"><a href="#三维线型图" class="headerlink" title="三维线型图"></a>三维线型图</h4><p>线形图和散点图相似，需要传入 x, y, z 三个坐标的数值。详细的代码如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"># 载入模块</div><div class="line">from mpl_toolkits.mplot3d import Axes3D</div><div class="line">import matplotlib.pyplot as plt</div><div class="line">import numpy as np</div><div class="line"></div><div class="line"># 生成数据</div><div class="line">x = np.linspace(-6 * np.pi, 6 * np.pi, 1000)</div><div class="line">y = np.sin(x)</div><div class="line">z = np.cos(x)</div><div class="line"></div><div class="line"># 创建 3D 图形对象</div><div class="line">fig = plt.figure()</div><div class="line">ax = Axes3D(fig)</div><div class="line"></div><div class="line"># 绘制线型图</div><div class="line">ax.plot(x, y, z)</div><div class="line"></div><div class="line"># 显示图</div><div class="line">plt.show()</div></pre></td></tr></table></figure></p>
<h4 id="三维柱状图"><a href="#三维柱状图" class="headerlink" title="三维柱状图"></a>三维柱状图</h4><p>绘制完线型图，我们继续尝试绘制三维柱状图，其实它的绘制步骤和上面同样非常相似。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># 载入模块</div><div class="line">from mpl_toolkits.mplot3d import Axes3D</div><div class="line">import matplotlib.pyplot as plt</div><div class="line">import numpy as np</div><div class="line"></div><div class="line"># 创建 3D 图形对象</div><div class="line">fig = plt.figure()</div><div class="line">ax = Axes3D(fig)</div><div class="line"></div><div class="line"># 生成数据并绘图</div><div class="line">x = [0, 1, 2, 3, 4, 5, 6]</div><div class="line">for i in x:</div><div class="line">    y = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</div><div class="line">    z = abs(np.random.normal(1, 10, 10))</div><div class="line">    ax.bar(y, z, i, zdir=&apos;y&apos;, color=[&apos;r&apos;, &apos;g&apos;, &apos;b&apos;, &apos;y&apos;])</div><div class="line">plt.show()</div></pre></td></tr></table></figure></p>
<h4 id="三维图曲面图"><a href="#三维图曲面图" class="headerlink" title="三维图曲面图"></a>三维图曲面图</h4><p>接下来需要绘制的三维曲面图要麻烦一些，我们需要对数据进行矩阵处理。其实和画二维等高线图很相似，只是多增加了一个维度。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"># 载入模块</div><div class="line">import numpy as np</div><div class="line">import matplotlib.pyplot as plt</div><div class="line">from mpl_toolkits.mplot3d import Axes3D</div><div class="line"></div><div class="line"># 创建 3D 图形对象</div><div class="line">fig = plt.figure()</div><div class="line">ax = Axes3D(fig)</div><div class="line"></div><div class="line"># 生成数据</div><div class="line">X = np.arange(-2, 2, 0.1)</div><div class="line">Y = np.arange(-2, 2, 0.1)</div><div class="line">X, Y = np.meshgrid(X, Y)</div><div class="line">Z = np.sqrt(X ** 2 + Y ** 2)</div><div class="line"></div><div class="line"># 绘制曲面图，并使用 cmap 着色</div><div class="line">ax.plot_surface(X, Y, Z, cmap=plt.cm.winter)</div><div class="line"></div><div class="line">plt.show()</div></pre></td></tr></table></figure></p>
<p>cmap=plt.cm.winter 表示采用了 winter 配色方案，也就是下图的渐变色。</p>
<h4 id="混合图绘制"><a href="#混合图绘制" class="headerlink" title="混合图绘制"></a>混合图绘制</h4><p>混合图就是将两种不同类型的图绘制在一张图里。绘制混合图一般有前提条件，那就是两种不同类型图的范围大致相同，否则将会出现严重的比例不协调，而使得混合图失去意义。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"># -*- coding: utf-8 -*</div><div class="line"># 载入模块</div><div class="line">from mpl_toolkits.mplot3d import Axes3D</div><div class="line">import numpy as np</div><div class="line">import matplotlib.pyplot as plt</div><div class="line"></div><div class="line"># 创建 3D 图形对象</div><div class="line">fig = plt.figure()</div><div class="line">ax = Axes3D(fig)</div><div class="line"></div><div class="line"># 生成数据并绘制图 1</div><div class="line">x1 = np.linspace(-3 * np.pi, 3 * np.pi, 500)</div><div class="line">y1 = np.sin(x1)</div><div class="line">ax.plot(x1, y1, zs=0, c=&apos;red&apos;)</div><div class="line"></div><div class="line"># 生成数据并绘制图 2</div><div class="line">x2 = np.random.normal(0, 1, 100)</div><div class="line">y2 = np.random.normal(0, 1, 100)</div><div class="line">z2 = np.random.normal(0, 1, 100)</div><div class="line">ax.scatter(x2, y2, z2)</div><div class="line"></div><div class="line"># 显示图</div><div class="line">plt.show()</div></pre></td></tr></table></figure></p>
<h4 id="子图绘制"><a href="#子图绘制" class="headerlink" title="子图绘制"></a>子图绘制</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"># -*- coding: utf-8 -*</div><div class="line"># 载入模块</div><div class="line">from mpl_toolkits.mplot3d import Axes3D</div><div class="line">import matplotlib.pyplot as plt</div><div class="line">import numpy as np</div><div class="line"></div><div class="line"># 创建 1 张画布</div><div class="line">fig = plt.figure()</div><div class="line"></div><div class="line">#===============</div><div class="line"></div><div class="line"># 向画布添加子图 1 </div><div class="line">ax1 = fig.add_subplot(1, 2, 1, projection=&apos;3d&apos;)</div><div class="line"></div><div class="line"># 生成子图 1 数据</div><div class="line">x = np.linspace(-6 * np.pi, 6 * np.pi, 1000)</div><div class="line">y = np.sin(x)</div><div class="line">z = np.cos(x)</div><div class="line"></div><div class="line"># 绘制第 1 张图</div><div class="line">ax1.plot(x, y, z)</div><div class="line"></div><div class="line">#===============</div><div class="line"></div><div class="line"># 向画布添加子图 2</div><div class="line">ax2 = fig.add_subplot(1, 2, 2, projection=&apos;3d&apos;)</div><div class="line"></div><div class="line"># 生成子图 2 数据</div><div class="line">X = np.arange(-2, 2, 0.1)</div><div class="line">Y = np.arange(-2, 2, 0.1)</div><div class="line">X, Y = np.meshgrid(X, Y)</div><div class="line">Z = np.sqrt(X ** 2 + Y ** 2)</div><div class="line"></div><div class="line"># 绘制第 2 张图</div><div class="line">ax2.plot_surface(X, Y, Z, cmap=plt.cm.winter)</div><div class="line"></div><div class="line"># 显示图</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p>我们可以来看一下这些代码。由于两张子图是绘制在 1 张画布上面的，所以这里需要提前创建 1 张画布。然后通过<code>.add_subplot()</code>添加子图，子图序号和二维绘图相似，只是注意 3D 绘图时要添加<code>projection=&#39;3d&#39;</code>参数。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Matplotlib 也可以绘制 3D 图像，与二维图像不同的是，绘制三维图像主要通过 mplot3d 模块实现。但是，使用 Matplotlib 绘制三维图像实际上是在二维画布上展示，所以一般绘制三维图像时，同样需要载入 pyplot 模块。&lt;br&gt;mplot3d 模块下
    
    </summary>
    
      <category term="编程" scheme="https://zhangpu1211.github.io/categories/program/"/>
    
    
      <category term="python" scheme="https://zhangpu1211.github.io/tags/python/"/>
    
      <category term="matplotlib" scheme="https://zhangpu1211.github.io/tags/matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>Matplotlib 绘2D图</title>
    <link href="https://zhangpu1211.github.io/2017/09/05/Matplotlib-%E7%BB%982D%E5%9B%BE/"/>
    <id>https://zhangpu1211.github.io/2017/09/05/Matplotlib-绘2D图/</id>
    <published>2017-09-05T03:09:06.000Z</published>
    <updated>2017-09-05T03:10:36.383Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Matplotlib 是一个非常简单而又完善的开源绘图库。那么它到底有多简单呢？</p>
<h4 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h4><p>首先<a href="https://matplotlib.org/2.0.2/Matplotlib.pdf" target="_blank" rel="external">官方文档</a>奉上<br>下面，我们通过 3 行代码绘制一张简单的折线图。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">from matplotlib import pyplot as plt</div><div class="line">plt.plot([1,2,3,4,2,1,5,6,1])</div><div class="line">plt.show()</div></pre></td></tr></table></figure></p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/2065390-b4e9b17d6216e0b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="折线图"></p>
<p>plt.plot() 是 pyplot 模块下面的直线绘制（折线图）方法类。示例中包含了一个[1,2,3,4,2,1,5,6,1]列表，该列表的值默认为y值，而 x 值会从 0 到 n-1，这也就是为什么你会发现3反而对应的是4。</p>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">matplotlib.pyplot.angle_spectrum</td>
<td style="text-align:center">绘制电子波谱图</td>
</tr>
<tr>
<td style="text-align:center">matplotlib.pyplot.bar</td>
<td style="text-align:center">绘制柱状图</td>
</tr>
<tr>
<td style="text-align:center">matplotlib.pyplot.barh</td>
<td style="text-align:center">绘制直方图</td>
</tr>
<tr>
<td style="text-align:center">matplotlib.pyplot.broken_barh</td>
<td style="text-align:center">绘制水平直方图</td>
</tr>
<tr>
<td style="text-align:center">matplotlib.pyplot.contour</td>
<td style="text-align:center">绘制等高线图</td>
</tr>
<tr>
<td style="text-align:center">matplotlib.pyplot.errorbar</td>
<td style="text-align:center">绘制误差线</td>
</tr>
<tr>
<td style="text-align:center">matplotlib.pyplot.hexbin</td>
<td style="text-align:center">绘制六边形图案</td>
</tr>
<tr>
<td style="text-align:center">matplotlib.pyplot.hist</td>
<td style="text-align:center">绘制柱形图</td>
</tr>
<tr>
<td style="text-align:center">matplotlib.pyplot.hist2d</td>
<td style="text-align:center">绘制水平柱状图</td>
</tr>
<tr>
<td style="text-align:center">matplotlib.pyplot.imshow</td>
<td style="text-align:center">以图像显示</td>
</tr>
<tr>
<td style="text-align:center">matplotlib.pyplot.pie</td>
<td style="text-align:center">绘制饼状图</td>
</tr>
<tr>
<td style="text-align:center">matplotlib.pyplot.quiver</td>
<td style="text-align:center">绘制量场图</td>
</tr>
<tr>
<td style="text-align:center">matplotlib.pyplot.scatter</td>
<td style="text-align:center">散点图</td>
</tr>
<tr>
<td style="text-align:center">matplotlib.pyplot.specgram</td>
<td style="text-align:center">绘制光谱图</td>
</tr>
<tr>
<td style="text-align:center">matplotlib.pyplot.subplot</td>
<td style="text-align:center">绘制子图</td>
</tr>
</tbody>
</table>
<p>下面，我们就来一些常见类型的图像绘制及参数使用。</p>
<ul>
<li><p>折线图</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">from matplotlib import pyplot as plt #载入 pyplot 绘图模块</div><div class="line">import numpy as np # 载入数值计算模块</div><div class="line"></div><div class="line"># 在 -2PI 和 2PI 之间等间距生成 1000 个值，也就是 x 坐标</div><div class="line">x = np.linspace(-2*np.pi, 2*np.pi, 1000)</div><div class="line"># 计算 y 坐标</div><div class="line">y = np.sin(x)</div><div class="line"></div><div class="line"># 向方法中 `*args` 输入 x，y 坐标</div><div class="line">plt.plot(x, y)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
</li>
<li><p>柱形图</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">from matplotlib import pyplot as plt #载入 pyplot 绘图模块</div><div class="line">import numpy as np # 载入数值计算模块</div><div class="line"></div><div class="line"># 在 -2PI 和 2PI 之间等间距生成 10 个值，也就是 X 坐标</div><div class="line">x = np.linspace(-2*np.pi, 2*np.pi, 10)</div><div class="line"># 计算 y 坐标</div><div class="line">y = np.sin(x)</div><div class="line"></div><div class="line"># 向方法中 `*args` 输入 x，y 坐标</div><div class="line">plt.bar(x, abs(y))  # y 值取绝对值</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
</li>
<li><p>散点图</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">from matplotlib import pyplot as plt #载入 pyplot 绘图模块</div><div class="line">import numpy as np # 载入数值计算模块</div><div class="line"></div><div class="line"># x,y 的坐标均有 numpy 在 0 到 1 中随机生成 1000 个值</div><div class="line">x = np.random.normal(0,1,1000)</div><div class="line">y = np.random.normal(0,1,1000)</div><div class="line"></div><div class="line"># 向方法中 `*args` 输入 X，y 坐标</div><div class="line">plt.scatter(x, y)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
</li>
<li><p>饼图</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">from matplotlib import pyplot as plt #载入 pyplot 绘图模块</div><div class="line"></div><div class="line">Z = [1, 2, 3, 4, 5]</div><div class="line"># 绘图</div><div class="line">plt.pie(Z)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
</li>
</ul>
<p>但是Matplotlib 默认的样式的确算不上美观。所以，我们需要设置绘图方法的参数，从而画出更漂亮和自己想要的图形。</p>
<h4 id="线型图进阶"><a href="#线型图进阶" class="headerlink" title="线型图进阶"></a>线型图进阶</h4><p>我们已经知道了，线型图通过 matplotlib.pyplot.plot(<em>args, *</em>kwargs) 方法绘出。其中，args 代表数据输入，而 kwargs 的部分就是用于设置样式参数了。</p>
<ul>
<li>常用参数</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">alpha=</td>
<td style="text-align:center">设置线型的透明度，从 0.0 到 1.0</td>
</tr>
<tr>
<td style="text-align:center">color=</td>
<td style="text-align:center">设置线型的颜色</td>
</tr>
<tr>
<td style="text-align:center">fillstyle=</td>
<td style="text-align:center">设置线型的填充样式</td>
</tr>
<tr>
<td style="text-align:center">linestyle=</td>
<td style="text-align:center">设置线型的样式</td>
</tr>
<tr>
<td style="text-align:center">linewidth=</td>
<td style="text-align:center">设置线型的宽度</td>
</tr>
<tr>
<td style="text-align:center">marker=</td>
<td style="text-align:center">设置标记点的样式</td>
</tr>
</tbody>
</table>
<ul>
<li>颜色参数</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">color =参数值</th>
<th style="text-align:center">颜色</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">b</td>
<td style="text-align:center">蓝色</td>
</tr>
<tr>
<td style="text-align:center">g</td>
<td style="text-align:center">绿色</td>
</tr>
<tr>
<td style="text-align:center">r</td>
<td style="text-align:center">红色</td>
</tr>
<tr>
<td style="text-align:center">w</td>
<td style="text-align:center">白色</td>
</tr>
<tr>
<td style="text-align:center">m</td>
<td style="text-align:center">洋红色</td>
</tr>
<tr>
<td style="text-align:center">y</td>
<td style="text-align:center">黄色</td>
</tr>
<tr>
<td style="text-align:center">k</td>
<td style="text-align:center">黑色</td>
</tr>
</tbody>
</table>
<ul>
<li>颜色参数</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">linestyle =参数值</th>
<th style="text-align:center">线型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">‘-‘</td>
<td style="text-align:center">默认实线</td>
</tr>
<tr>
<td style="text-align:center">‘–’</td>
<td style="text-align:center">虚线</td>
</tr>
<tr>
<td style="text-align:center">‘-.’</td>
<td style="text-align:center">间断线</td>
</tr>
<tr>
<td style="text-align:center">‘:’</td>
<td style="text-align:center">点状线</td>
</tr>
</tbody>
</table>
<ul>
<li>样本点标记</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">marker =参数值</th>
<th style="text-align:center">样本点标记</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">‘.’</td>
<td style="text-align:center">实心点</td>
</tr>
<tr>
<td style="text-align:center">‘,’</td>
<td style="text-align:center">像素点</td>
</tr>
<tr>
<td style="text-align:center">‘o’</td>
<td style="text-align:center">空心点</td>
</tr>
<tr>
<td style="text-align:center">‘p’</td>
<td style="text-align:center">五角形</td>
</tr>
<tr>
<td style="text-align:center">‘x’</td>
<td style="text-align:center">x 形</td>
</tr>
<tr>
<td style="text-align:center">‘+’</td>
<td style="text-align:center">+ 形</td>
</tr>
</tbody>
</table>
<p>下面我们根据这些属性将我们的三角函数图像重新画一遍<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"># -*- coding: utf-8 -*</div><div class="line"></div><div class="line">from matplotlib import pyplot as plt  # 载入 pyplot 绘图模块</div><div class="line">import numpy as np  # 载入数值计算模块</div><div class="line"></div><div class="line"># 在 -2PI 和 2PI 之间等间距生成 1000 个值，也就是 x 坐标</div><div class="line">x = np.linspace(-2 * np.pi, 2 * np.pi, 1000)</div><div class="line"># 计算 sin() 对应的纵坐标</div><div class="line">y1 = np.sin(x)</div><div class="line"># 计算 cos() 对应的纵坐标</div><div class="line">y2 = np.cos(x)</div><div class="line"></div><div class="line"># 向方法中 `*args` 输入 X，y 坐标</div><div class="line">plt.plot(x, y1, color=&apos;r&apos;, linestyle=&apos;--&apos;, linewidth=2, alpha=0.1)</div><div class="line">plt.plot(x, y2, color=&apos;b&apos;, linestyle=&apos;-&apos;, linewidth=2)</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2065390-a93c9becc6d20157.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="线形图"></p>
<h4 id="散点图进阶"><a href="#散点图进阶" class="headerlink" title="散点图进阶"></a>散点图进阶</h4><p>除了线型图以外，散点图也是常用图形之一。例如，我们在使用机器学习算法聚类的时候，往往就会通过散点图将样本数据展示出来。Matplotlib 中，绘制散点图的方法我们已经知道了，那就是 matplotlib.pyplot.scatter()。接下来，我们就看一看它包含有哪些参数。<br>| 参数    | 含义|<br>| :————-: |:————-:|<br>| s=    | 散点大小|<br>| c=    | 散点颜色|<br>| marker=|     散点样式|<br>| cmap=    | 定义多类别散点的颜色|<br>| alpha=    | 点的透明度|<br>| edgecolors=    | 散点边缘颜色|<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># -*- coding: utf-8 -*</div><div class="line"></div><div class="line">from matplotlib import pyplot as plt  # 载入 pyplot 绘图模块</div><div class="line">import numpy as np  # 载入数值计算模块</div><div class="line"></div><div class="line">x = np.random.rand(100) # 随机在 0 到 1 之间生成 100 个数值</div><div class="line">y = np.random.rand(100) # 随机在 0 到 1 之间生成 100 个数值</div><div class="line">colors = np.random.rand(100) # 随机在 0 到 1 之间生成 100 个数值</div><div class="line">size = np.random.normal(20, 30, 100) # 随机在 20 到 30 之间生成 100 个数值</div><div class="line"></div><div class="line"># 绘制散点图</div><div class="line">plt.scatter(x, y, s=size, c=colors)</div><div class="line">plt.show()</div><div class="line">plt.show()</div></pre></td></tr></table></figure></p>
<h4 id="饼状图进阶"><a href="#饼状图进阶" class="headerlink" title="饼状图进阶"></a>饼状图进阶</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># -*- coding: utf-8 -*</div><div class="line"></div><div class="line">import matplotlib.pyplot as plt</div><div class="line"></div><div class="line">label = &apos;Cat&apos;, &apos;Dog&apos;, &apos;Cattle&apos;, &apos;Sheep&apos;, &apos;Horse&apos; # 各类别标签</div><div class="line">color = &apos;r&apos;, &apos;g&apos;, &apos;r&apos;, &apos;g&apos;, &apos;y&apos; # 各类别颜色</div><div class="line">size = [1, 2, 3, 4, 5] # 各类别占比</div><div class="line">explode = (0, 0, 0, 0, 0.2) # 各类别的偏移半径</div><div class="line"># 绘制饼状图</div><div class="line">plt.pie(size, colors=color, explode=explode, labels=label, shadow=True, autopct=&apos;%1.1f%%&apos;)</div><div class="line"># 饼状图呈正圆</div><div class="line">plt.axis(&apos;equal&apos;)</div><div class="line"># 显示图</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<h4 id="组合图"><a href="#组合图" class="headerlink" title="组合图"></a>组合图</h4><p>上面演示了三种常见图像的绘制。实际上，我们往往会遇到将几种类型的一样的图放在一张图内显示，也就是组合图的绘制。其实很简单，你只需要将需要或者的组合图样式放在一起就好了，比如柱形图和折线图。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># -*- coding: utf-8 -*</div><div class="line"></div><div class="line">import matplotlib.pyplot as plt</div><div class="line"></div><div class="line">x = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]</div><div class="line">y_bar = [3, 4, 6, 8, 9, 10, 9, 11, 7, 8]</div><div class="line">y_line = [2, 3, 5, 7, 8, 9, 8, 10, 6, 7]</div><div class="line"></div><div class="line">plt.bar(x, y_bar)</div><div class="line">plt.plot(x, y_line, &apos;-o&apos;, color=&apos;y&apos;)</div><div class="line">plt.show()</div></pre></td></tr></table></figure></p>
<h4 id="子图"><a href="#子图" class="headerlink" title="子图"></a>子图</h4><p>子图，就是将几张独立的图放在一张大图中呈现。在一些需要对比的情形下，子图非常有效。<br>Matplotlib 中，绘制子图的方法为matplotlib.pyplot.subplot()，我们通过该方法来控制各子图的显示顺序。其中规则为<code>subplot(行序号, 列序号, 图序号)</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">import numpy as np</div><div class="line">import matplotlib.pyplot as plt</div><div class="line"></div><div class="line"># 生成数据</div><div class="line">x = np.linspace(-2*np.pi, 2*np.pi) </div><div class="line"></div><div class="line">y1 = np.sin(x)</div><div class="line">y2 = np.cos(x)</div><div class="line"></div><div class="line"># 子图 1</div><div class="line">plt.subplot(2, 2, 1)</div><div class="line">plt.plot(x, y1, &apos;k&apos;)</div><div class="line"># 子图 2</div><div class="line">plt.subplot(2, 2, 2)</div><div class="line">plt.plot(x, y2, &apos;r&apos;)</div><div class="line"># 子图 3</div><div class="line">plt.subplot(2, 2, 3)</div><div class="line">plt.plot(x, y2, &apos;y&apos;)</div><div class="line"># 子图 4</div><div class="line">plt.subplot(2, 2, 4)</div><div class="line">plt.plot(x, y2, &apos;g&apos;)</div><div class="line"></div><div class="line">plt.show()</div></pre></td></tr></table></figure></p>
<p><strong><em>更为高级的子图画法</em></strong><br>首先需要了解一下基础知识<br>画图需要生成一个figure(可理解为画布或进程)，此参数可无需设置,如未设置pyplot会自动帮你创建一个(figure 1)。接下来，要决定在figure中哪个位置画图，画多大的图。这就引入坐标点和大小的概念，整个figure按照X与Y轴横竖来平均切分，以0到1之间的数值来表示。 如：X轴上的0.1，代表了X轴总长自左向右的10%位置。<br>整个画图区域就是一个axes，通过Axes参数选项可以对画图区域的坐标点与大小进行设置，如未设置会自动帮接近覆盖整个figure的值。在一个figure中可添加多个Axes，就如一个画布中可以画一整副图，又或者可以画四宫图等等。axes参数设置如下：<br>axes([x,y,xs,ys])#其中x代表在X轴的<strong>位置</strong>，y代表在Y轴的<strong>位置</strong>，xs代表在X轴上<strong>向右延展</strong>的范围大小，yx代表在Y轴中<strong>向上延展</strong>的范围大小。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">import numpy as np</div><div class="line">import matplotlib.pyplot as plt</div><div class="line"></div><div class="line"># 生成数据</div><div class="line">x = np.linspace(-2 * np.pi, 2 * np.pi)</div><div class="line"></div><div class="line">y1 = np.sin(x)</div><div class="line">y2 = np.cos(x)</div><div class="line"></div><div class="line"># 大图</div><div class="line">plt.axes([.1, .1, .8, .8])</div><div class="line">plt.plot(x, y1, &apos;k&apos;)</div><div class="line"># 小图</div><div class="line">plt.axes([.6, .6, .3, .3])</div><div class="line">plt.plot(x, y2, &apos;r&apos;)</div><div class="line"></div><div class="line">plt.show()</div></pre></td></tr></table></figure></p>
<h4 id="绘制图例"><a href="#绘制图例" class="headerlink" title="绘制图例"></a>绘制图例</h4><p>一般情况下，当绘制好图案后，还需要绘制图例。Matplotlib 中，图例可以通过 matplotlib.pyplot.legend() 方法绘制。我们又拿上面的正弦和余弦曲线举例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># -*- coding: utf-8 -*</div><div class="line"></div><div class="line">from matplotlib import pyplot as plt  # 载入 pyplot 绘图模块</div><div class="line">import numpy as np  # 载入数值计算模块</div><div class="line"></div><div class="line"># 生成数据</div><div class="line">X = np.linspace(-2 * np.pi, 2 * np.pi, 1000)</div><div class="line">y1 = np.sin(X)</div><div class="line">y2 = np.cos(X)</div><div class="line"></div><div class="line"># 使用 label= 添加标签</div><div class="line">plt.plot(X, y1, color=&apos;r&apos;, linestyle=&apos;--&apos;, linewidth=2, label=&apos;sin 函数&apos;)</div><div class="line">plt.plot(X, y2, color=&apos;b&apos;, linestyle=&apos;-&apos;, linewidth=2, label=&apos;cos 函数&apos;)</div><div class="line"># 绘制图例</div><div class="line">plt.legend(loc=&apos;upper left&apos;)</div><div class="line">plt.show()</div></pre></td></tr></table></figure></p>
<p>在这里，我们需要修改两个地方，也就是通过<code>label=</code>为每一条曲线添加标签。然后，增加一条<code>plt.legend(loc=&#39;upper left&#39;)</code>就可以了。其中，<code>loc=&#39;upper left&#39;</code>是指明图例的位置，例如这里是左上方。你还可以通过 down 和 right 组合实现位置的变换。</p>
<h4 id="图像标注"><a href="#图像标注" class="headerlink" title="图像标注"></a>图像标注</h4><p>当我们绘制一些较为复杂的图像时，阅读对象往往很难全面理解图像的含义。而此时，图像标注往往会起到画龙点睛的效果。图像标注，就是在画面上添加文字注释、指示箭头、图框等各类标注元素。</p>
<p>Matplotlib 中，文字标注的方法由 matplotlib.pyplot.text() 实现。最基本的样式为 matplotlib.pyplot.text(x, y, s)，其中 x, y 用于标注位置定位，s 代表标注的字符串。除此之外，你还可以通过 fontsize= , horizontalalignment= 等参数调整标注字体的大小，对齐样式等。<br>下面，我们举一个对柱形图进行文字标注的示例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># -*- coding: utf-8 -*</div><div class="line">from matplotlib import pyplot as plt # 载入绘图模块</div><div class="line"></div><div class="line">x_bar = [10, 20, 30, 40, 50] #柱形图横坐标</div><div class="line">y_bar = [0.5, 0.6, 0.7, 0.4, 0.6] #柱形图纵坐标</div><div class="line">bars = plt.bar(x_bar, y_bar, color=&apos;blue&apos;,  width=2) # 绘制柱形图</div><div class="line">for i, rect in enumerate(bars):</div><div class="line">    x_text = rect.get_x() # 获取柱形图横坐标</div><div class="line">    y_text = rect.get_height() + 0.01 # 获取柱子的高度并增加 0.01</div><div class="line">    plt.text(x_text, y_text, &apos;%.1f&apos; % y_bar[i]) # 标注文字</div><div class="line"></div><div class="line">plt.show()</div></pre></td></tr></table></figure></p>
<p>除了文字标注之外，还可以通过 matplotlib.pyplot.annotate() 方法向图像中添加箭头等样式标注。接下来，我们向上面的例子中增添一行增加箭头标记的代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 增加箭头标注</div><div class="line">   plt.annotate(&apos;Max&apos;, xy=(32, 0.6), xytext=(38, 0.6), arrowprops=dict(facecolor=&apos;black&apos;, width=1, headwidth=7))</div></pre></td></tr></table></figure></p>
<p>上面的示例中，xy=() 表示标注终点坐标，xytext=() 表示标注起点坐标。另外，arrowprops=() 用于设置箭头样式，facecolor= 设置颜色，width= 设置箭尾宽度，headwidth= 设置箭头宽度。在箭头绘制的过程中，还有一个 arrowstyle= 用于改变箭头的样式。另外，connectionstyle= 的参数可以用于更改箭头连接的样式。下图展示了常见的箭头连接样式。</p>
<h4 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h4><p><img src="http://upload-images.jianshu.io/upload_images/2065390-0b06438d7a23c191.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">import numpy as np</div><div class="line">import matplotlib.pyplot as plt</div><div class="line">ax = plt.subplot(111)</div><div class="line">ax.spines[&apos;right&apos;].set_color(&apos;none&apos;)</div><div class="line">ax.spines[&apos;top&apos;].set_color(&apos;none&apos;)</div><div class="line">ax.xaxis.set_ticks_position(&apos;bottom&apos;)</div><div class="line">ax.spines[&apos;bottom&apos;].set_position((&apos;data&apos;, 0))</div><div class="line">ax.yaxis.set_ticks_position(&apos;left&apos;)</div><div class="line">ax.spines[&apos;left&apos;].set_position((&apos;data&apos;, 0))</div><div class="line">X = np.linspace(-np.pi, np.pi, 256, endpoint=True)</div><div class="line">C, S = np.cos(X), np.sin(X)</div><div class="line">plt.plot(X, C, color=&quot;blue&quot;, linewidth=2.5, linestyle=&quot;-&quot;, label=&quot;Cos Function&quot;)</div><div class="line">plt.plot(X, S, color=&quot;red&quot;, linewidth=2.5, linestyle=&quot;-&quot;, label=&quot;Sin Function&quot;)</div><div class="line">#设置x,y轴范围</div><div class="line">plt.xlim(X.min() * 1.1, X.max() * 1.1)</div><div class="line">plt.ylim(C.min() * 1.1, C.max() * 1.1)</div><div class="line">#设置x,y轴的坐标刻度</div><div class="line">plt.xticks([-np.pi, -np.pi / 2, 0, np.pi / 2, np.pi],</div><div class="line">           [r&apos;$-\pi$&apos;, r&apos;$-\pi/2$&apos;, r&apos;$0$&apos;, r&apos;$+\pi/2$&apos;, r&apos;$+\pi$&apos;])</div><div class="line">plt.yticks([-1, +1],</div><div class="line">           [r&apos;$-1$&apos;, r&apos;$+1$&apos;])</div><div class="line">t = 2 * np.pi / 3</div><div class="line">plt.plot([t, t], [0, np.cos(t)],</div><div class="line">         color=&apos;blue&apos;, linewidth=1.5, linestyle=&quot;--&quot;)</div><div class="line">plt.scatter([t, ], [np.cos(t), ], 50, color=&apos;blue&apos;)</div><div class="line">plt.annotate(r&apos;$\sin(\frac&#123;2\pi&#125;&#123;3&#125;)=\frac&#123;\sqrt&#123;3&#125;&#125;&#123;2&#125;$&apos;,</div><div class="line">             xy=(t, np.sin(t)), xycoords=&apos;data&apos;,</div><div class="line">             xytext=(+10, +30), textcoords=&apos;offset points&apos;, fontsize=16,</div><div class="line">             arrowprops=dict(arrowstyle=&quot;-&gt;&quot;, connectionstyle=&quot;arc3,rad=.2&quot;))</div><div class="line">plt.plot([t, t], [0, np.sin(t)],</div><div class="line">         color=&apos;red&apos;, linewidth=1.5, linestyle=&quot;--&quot;)</div><div class="line">plt.scatter([t, ], [np.sin(t), ], 50, color=&apos;red&apos;)</div><div class="line">plt.annotate(r&apos;$\cos(\frac&#123;2\pi&#125;&#123;3&#125;)=-\frac&#123;1&#125;&#123;2&#125;$&apos;,</div><div class="line">             xy=(t, np.cos(t)), xycoords=&apos;data&apos;,</div><div class="line">             xytext=(-90, -50), textcoords=&apos;offset points&apos;, fontsize=16,</div><div class="line">             arrowprops=dict(arrowstyle=&quot;-&gt;&quot;, connectionstyle=&quot;arc3,rad=.2&quot;))</div><div class="line"></div><div class="line">plt.legend(loc=&apos;upper left&apos;, frameon=False)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Matplotlib 是一个非常简单而又完善的开源绘图库。那么它到底有多简单呢？&lt;/p&gt;
&lt;h4 id=&quot;基本知识&quot;&gt;&lt;a href=&quot;#基本知识&quot; class=&quot;headerlink&quot; title=&quot;基本知识&quot;&gt;&lt;/a&gt;基本知识&lt;/h4&gt;&lt;p&gt;首
    
    </summary>
    
      <category term="编程" scheme="https://zhangpu1211.github.io/categories/program/"/>
    
    
      <category term="python" scheme="https://zhangpu1211.github.io/tags/python/"/>
    
      <category term="matplotlib" scheme="https://zhangpu1211.github.io/tags/matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>phpstudy升级mysql5.7以及遇到的问题汇总</title>
    <link href="https://zhangpu1211.github.io/2017/09/05/phpstudy%E5%8D%87%E7%BA%A7mysql5-7%E4%BB%A5%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>https://zhangpu1211.github.io/2017/09/05/phpstudy升级mysql5-7以及遇到的问题汇总/</id>
    <published>2017-09-05T03:07:05.000Z</published>
    <updated>2017-09-05T03:08:06.730Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近学习java的时候建数据库，用到了create_time和update_time，我想设置成current_time，但是在mysql5,7之前貌似不支持这个操作，没办法那就升级一下吧！</p>
</blockquote>
<h4 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h4><p>首先当然是现在了，<a href="https://dev.mysql.com/downloads/file/?id=467269" target="_blank" rel="external">地址在这里</a>,你可能看到它会提示你登录，这么麻烦呢！肯定不适合我这个懒人了，往下看，果然有提示<strong><a href="https://dev.mysql.com/get/archives/mysql-5.7/mysql-5.7.17-winx64.zip" target="_blank" rel="external">No thanks, just start my download.</a></strong>，点击下载就行啦。</p>
<h4 id="升级mysql版本"><a href="#升级mysql版本" class="headerlink" title="升级mysql版本"></a>升级mysql版本</h4><ul>
<li>备份原来 phpStudy 中 MySQL 安装目录，这个备份因人而异，不过最关键的还是你的本地数据库了，最保险的做法就是导出sql文件，升级完成后在导入</li>
<li>解压下载的mysql文件，将内容复制到phpstudy中mysql目录下</li>
<li>复制一份 my-default.ini ，重命名为 my.ini</li>
<li><p>打开my.ini,增加如下内容，这里的路径为你原来phpstudy中mysql的路径</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">basedir=&quot;D:/phpStudy/MySQL/&quot;</div><div class="line">datadir=&quot;D:/phpStudy/MySQL/data/&quot;</div><div class="line">character-set-server=utf8</div><div class="line">port=3306</div></pre></td></tr></table></figure>
</li>
<li><p>添加bin目录到系统环境变量path中</p>
</li>
<li>在mysql的bin目录下打开cmd，执行如下操作<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysqld --initialize</div><div class="line">mysqld -install</div></pre></td></tr></table></figure>
</li>
</ul>
<p>至此mysql升级结束，下面来填坑</p>
<h4 id="mysql安装后的问题"><a href="#mysql安装后的问题" class="headerlink" title="mysql安装后的问题"></a>mysql安装后的问题</h4><ul>
<li>打开后密码不正确<br>尝试修改 root 用户密码：<br>打开 my.ini，找到 [mysqld]，在下面添加：<code>skip-grant-tables</code>(此参数用于忘记mysql密码)<br>打开cmd，输入<code>mysql -u root -p</code>，会让你输入密码，直接回车即可。现在可以进入mysql了，那么我们可以修改默认密码。执行如下语句<code>update user set authentication_string=password(&quot;123456&quot;) where user=&quot;root&quot;;</code>5.7.11之前的版本用这个<code>update user set password=password(&quot;123456&quot;) where user=&quot;root&quot;;</code>密码修改完成。<strong>进入my.ini删除<code>skip-grant-tables</code></strong></li>
<li>但是在你用mysqlfront或者Navicat登录的时候会提示你密码已经过期<br>dmd进入mysql后，直接输入下面的命令(这个时候你输入刚才设置的密码)<br><code>SET PASSWORD = PASSWORD(&#39;123456&#39;);</code><br>然后你会发现navicat可以连接了</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近学习java的时候建数据库，用到了create_time和update_time，我想设置成current_time，但是在mysql5,7之前貌似不支持这个操作，没办法那就升级一下吧！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;下载
    
    </summary>
    
      <category term="工具" scheme="https://zhangpu1211.github.io/categories/tools/"/>
    
    
      <category term="mysql" scheme="https://zhangpu1211.github.io/tags/mysql/"/>
    
      <category term="phpstudy" scheme="https://zhangpu1211.github.io/tags/phpstudy/"/>
    
  </entry>
  
  <entry>
    <title>maven安装与aliyun仓库配置</title>
    <link href="https://zhangpu1211.github.io/2017/08/27/maven%E5%AE%89%E8%A3%85%E4%B8%8Ealiyun%E4%BB%93%E5%BA%93%E9%85%8D%E7%BD%AE/"/>
    <id>https://zhangpu1211.github.io/2017/08/27/maven安装与aliyun仓库配置/</id>
    <published>2017-08-27T02:23:24.000Z</published>
    <updated>2017-08-27T02:30:34.486Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>MAVEN项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的软件项目管理工具。Maven 除了以程序构建能力为特色之外，还提供高级项目管理工具。由于 Maven 的缺省构建规则有较高的可重用性，所以常常用两三行 Maven 构建脚本就可以构建简单的项目。由于 Maven 的面向项目的方法，许多 Apache Jakarta 项目发文时使用 Maven，而且公司项目采用 Maven 的比例在持续增长。</p>
</blockquote>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="http://maven.apache.org/download.cgi" target="_blank" rel="external">下载地址</a>,选择对应操作系统版本，linux就是第一个啦，win就是第二个。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2065390-e9d2ce84ac64fde2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>linux解压命令<code>tar xzvf apache-maven-3.5.0-bin.tar.gz</code><br>window直接解压到你想要的目录即可</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>让我们看看官方文档怎么说<br>Alternatively use your preferred archive extraction tool.</p>
<ul>
<li>Add the bin directory of the created directory apache-maven-3.5.0 to the PATH environment variable</li>
<li>Confirm with mvn -v in a new shell. The result should look similar to</li>
</ul>
<p>简单来说就是讲路径添加到系统的环境变量中，然后用<code>mvn -v</code>来检测是否成功。在此我们默认各位的java环境已经配置成功！<br>windows:在path下添加<code>C:\Program Files\apache-maven-3.5.0\bin</code><br>linux下添加环境变量方法:<code>export PATH=/opt/apache-maven-3.5.0/bin:$PATH</code><br>可选配置：<br>MAVEN_OPTS环境变量：<br>该变量包含用于启动运行Maven的JVM的参数，可用于向Maven提供其他选项。可以使用值-Xms256m -Xmx512m定义JVM内存设置</p>
<h3 id="添加阿里云镜像和修改本地仓库位置"><a href="#添加阿里云镜像和修改本地仓库位置" class="headerlink" title="添加阿里云镜像和修改本地仓库位置"></a>添加阿里云镜像和修改本地仓库位置</h3><p>打开maven文件夹下conf/setting.xml，查找<strong><em>mirror</em></strong>和<strong><em>localRepository</em></strong>关键字,将以下代码复制到对应位置。最后复制一份setting.xml到你新修改的本地仓库<code>E:\repository</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;mirrors&gt;</div><div class="line">  	&lt;mirror&gt;</div><div class="line">        &lt;id&gt;nexus-aliyun&lt;/id&gt;</div><div class="line">        &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</div><div class="line">        &lt;name&gt;Nexus aliyun&lt;/name&gt;</div><div class="line">        &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</div><div class="line">    &lt;/mirror&gt; </div><div class="line">&lt;/mirrors&gt;</div></pre></td></tr></table></figure></p>
<p><code>&lt;localRepository&gt;E:\repository&lt;/localRepository&gt;</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;MAVEN项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的软件项目管理工具。Maven 除了以程序构建能力为特色之外，还提供高级项目管理工具。由于 Maven 的缺省构建规则有较高的可重用性，所以常常用两三行 Maven
    
    </summary>
    
      <category term="编程" scheme="https://zhangpu1211.github.io/categories/program/"/>
    
    
      <category term="java" scheme="https://zhangpu1211.github.io/tags/java/"/>
    
      <category term="maven" scheme="https://zhangpu1211.github.io/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>vscode中使用git</title>
    <link href="https://zhangpu1211.github.io/2017/08/24/vscode%E4%B8%AD%E4%BD%BF%E7%94%A8git/"/>
    <id>https://zhangpu1211.github.io/2017/08/24/vscode中使用git/</id>
    <published>2017-08-24T10:36:12.000Z</published>
    <updated>2017-08-24T10:51:46.205Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>vscode简介</em></strong><br>VSCode是微软推出的一款轻量编辑器，采取了和VS相同的UI界面，搭配合适的插件可以优化前端开发的体验。<br>布局：左侧是用于展示所要编辑的所有文件和文件夹的文件管理器，依次是<strong>资源管理器</strong>，<strong>搜索</strong>，<strong>GIT</strong>，<strong>调试</strong>，<strong>插件</strong>，右侧是打开文件的编辑区域，最多可同时打开三个编辑区域到侧边。在初次使用时如果本地没有安装git会提示先安装git，然后重启vscode。</p>
<p><strong><em>git下载地址</em></strong><br><strong><em><a href="https://git-scm.com/download/win" target="_blank" rel="external">Downloading Git</a></em></strong><br><em>如果安装过程提示无法添加环境变量到path中，则需要将git安装目录下的cmd目录添加到系统的path变量下</em></p>
<p><strong><em>配置git</em></strong></p>
<ul>
<li><p>设置全局配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &quot;your name&quot; </div><div class="line">git config --global user.email &quot;your email&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>进入你的项目目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">cd d:/wamp/www/wap              //首先指定到你的项目目录下</div><div class="line">git init</div><div class="line">touch README.md</div><div class="line">git add README.md</div><div class="line">git commit -m &quot;first commit&quot;</div><div class="line">git remote add origin https://github.com/youtname/vscode.git   </div><div class="line">//用你仓库的url,vscode.git中vscode为仓库名称,使用时必须先创建</div><div class="line">git push -u origin master  //提交到你的仓库</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><em>正式使用</em></strong></p>
<ul>
<li><p>提交代码到git<br>回到vs code打开git工作区就会看到所有代码显示在这里<br><img src="http://upload-images.jianshu.io/upload_images/2065390-a262f07bfbd6248a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>点击+号，把所有文件提交到暂存区。<br>然后打开菜单选择–提交已暂存的<br><img src="http://upload-images.jianshu.io/upload_images/2065390-d29fcbab73a224b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>然后按提示随便在消息框里输入一个消息，再按ctrl+enter提交<br><img src="http://upload-images.jianshu.io/upload_images/2065390-2a14bac73c66427b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>然后把所有暂存的代码push云端，<br><img src="http://upload-images.jianshu.io/upload_images/2065390-3e8449a7a0936e07.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>点击后，会弹出让你输入账号密码，把你托管平台的账号密码输入上去就行了<br>不出问题的话你整个项目就会提交到云端上了。<br>在vs中每次更新代码都会要输入账号密码，方便起见，可以配置一下让GIT记住密码账号。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global credential.helper store   //在Git Bash输入这个命令就可以了</div></pre></td></tr></table></figure>
</li>
<li><p>同步代码<br><strong>这里说下平时修改代码后提交到云端的使用，和本地代码和云端同步</strong><br>　　随便打开一个文件，添加一个注释<br><img src="http://upload-images.jianshu.io/upload_images/2065390-0c48e7a94592d088.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>可以看到git图标有一个提示，打开git工作区可以看到就是修改的这个文件<br><img src="http://upload-images.jianshu.io/upload_images/2065390-9f771ddc6682827b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>然后点击右侧的+号，把他暂存起来。<br>再在消息框里输入消息，按ctrl+enter提交暂存<br><img src="http://upload-images.jianshu.io/upload_images/2065390-1131357d55addbd4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>再点击push提交，代码就提交到云端了。<br><img src="http://upload-images.jianshu.io/upload_images/2065390-d9d53c0c5a426050.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>打开 码云就可以看到了。。<br><img src="http://upload-images.jianshu.io/upload_images/2065390-3834f1650889eccf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
</li>
<li>更新回本地<br>比如当你在家里修改了代码提交到云端后，回到公司只需要用vscode打开项目点击菜单中的pull就可以同步过来了。</li>
<li>克隆项目<br>打开Git Bash输入以下命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd d:/project   //指定存放的目录</div><div class="line">git clone https://github.com/youtname/your repository.git     //你的仓库地址</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;vscode简介&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;VSCode是微软推出的一款轻量编辑器，采取了和VS相同的UI界面，搭配合适的插件可以优化前端开发的体验。&lt;br&gt;布局：左侧是用于展示所要编辑的所有文件和文件夹的文件管理器，依次是&lt;strong&gt;资
    
    </summary>
    
      <category term="工具" scheme="https://zhangpu1211.github.io/categories/tools/"/>
    
    
      <category term="vs" scheme="https://zhangpu1211.github.io/tags/vs/"/>
    
      <category term="git" scheme="https://zhangpu1211.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zhangpu1211.github.io/2017/08/24/hello-world/"/>
    <id>https://zhangpu1211.github.io/2017/08/24/hello-world/</id>
    <published>2017-08-24T02:36:47.025Z</published>
    <updated>2017-08-24T02:36:47.025Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
